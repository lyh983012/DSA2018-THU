

数据结构和算法：
动态申请了2个n长度，2个m长度的数组，分别存储各组abxy。对各个点逐一进行判定，使用的判定方法是：对第i条直线，如果b_i*x+a_i*y>=ab，那么说明这个点在直线的上方，否则在直线的下方。通过这个方法，使用二分查找的方法定位出点所在的区域，其中，最外层和最内层（也就是编号为0或者n的区域需要独立出来写一下判定）为了优化时间，可以放在循环外判定。
。
完成过程中遇到的问题：
1、以为分区是从1开始的，于是debug了很久很久。
2、在终止条件中遇到了一些麻烦，后来使用了ab2=alist[index+1]*doty[i]+blist[index+1]*dotx[i]作为相邻直线的判断，最后使用了(hi-lo)==1作为终止条件之一

分析时间复杂度：
在同一个循环中，使用二分查找，复杂度是O（logn）的，共有m个循环，所以log（mlogn）

空间复杂度：
空间复杂度主要由四个大数组决定，是O（n+m）
