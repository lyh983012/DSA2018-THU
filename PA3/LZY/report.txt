数据结构：
使用了二叉搜索树和贪心算法实现

算法：
使用了两个数组，第一个数组存桥，第二个数组存材料。
桥对象储存了它的开销和美观度的需求，材料对象存储了所需的花费以及它能补充的美观度
算法的步骤
1、将两个数组分别归并排序，时间开销是O(nlog(n))以及O(mlogm)
	桥用value进行排序
	材料用value进行排序
2、从value要求最大的桥开始，对这个桥，把所有符合情况的材料塞到一棵二叉搜索树中，使用的关键码是cost。
3、寻找cost，然后把符合的cost最小的那个点删掉，返回需要的开销
4、逐步处理完所有的点，然后输出总的开销

时间开销：

对于平衡二叉树：
对一个桥，所需的时间复杂度有上限，最坏情况下，对所有的桥，树的规模都是m
对于插入操作，每次严格小于等于logm
对于删除操作，同样每次严格小于等于logm
从而总的时间开销是O（nlogm）
由于树的规模是逐渐增长的，实际上插入操作不会有这么高的时间复杂度。

对于未平衡的的二叉树：
上述的上限实际上是m。
但是鉴于这样高度有规律的数据的而出现概率非常，我们应该以其期望高度来衡量算法的时间消耗
未平衡的二叉树的高度平均是Θ(m^0.5)的
故总的时间开销的期望是Θ(nm^0.5)的
在实际应用中，这样的开销还是可以经得起考验的，能够达到最坏情况的几率是可以忽略不计的

其中，nm同阶

故本题，简化的算法给出的时间复杂度是
Θ(n^1.5)
如使用平衡二叉树，可变为
Θ(nlogn)

空间开销：
两个数组，一共是O（m+n）
一棵树，不超过O（m）
一共是O（2m+n）=Θ(n)
