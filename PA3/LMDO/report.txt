数据结构：
	第一次实现使用了字典树。
	第二次实现使用了哈希算法以及哈希表。
	最终使用了哈希算法，因为它在时间和空间上具有很大优势。
算法：

本题实现有以下几个重点：
1、存储字符串：由于空间较为富余，所以使用一个longlong型的数字，将字符串每一位当成27进制的数的一位（a=1～z=26，避免出现0），转化为10进制存储，记为name。
2、实现哈希函数：直接对哈希表的容量取模作为index
3、处理冲突：每个键值对存储了key和value，用index索引，存储在一个数组，key是原本的name，value是每一个name出现的次数，每个键值对中存储一个指针指向下一个有相同index的键值对。index索引后检查key是否发生冲突，如果是则检查下一个键值对。
4、实现流程：
	1）申请一个capacity长的键值对数组，在本题中capacity取30000.
	2）循环n次读入人名，检查经过哈希函数映射之后是否已经出现过，如果没有则添加，如果有则让value++，如果发生冲突则使用3中的方案解决。每次记录value最大值和对应键值对
	3）输出键值对中存储的key。

时间复杂度估计：
	数据的读入需要O(n)的事件，进一步地，O（8n)。
	
	取模的哈希函数发生重复的概率大概可以估计，相当于将26^8+26^7+26^6+26^5+26^4+26^3+26^2+26个排列对p类进行分类，实际上和p成反比,在本例中等于1/capacity。
		最坏情况，对于n（n<capacity)个不重复的名字，造成最大复杂度的情况应该是全部冲突，那么概率会是（1/1/capacity)^n，
		这时候的时间复杂度为O(m^2)

	在m比较大的时候，总的时间复杂度可以认为是O(m^2)
	但是这个概率太小，在大多数情况下发生冲突造成的时间复杂度是比较小的，每次查找平均时间复杂度是O(1)，总的可以认为是O(n)的。

空间复杂度估计：
	人名最多有10000个
	假设全部不重复
	空间复杂度为O(capacity+10000) 为常数